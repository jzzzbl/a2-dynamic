"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_reanimated_1 = __importStar(require("react-native-reanimated"));
const ReanimatedArcBase_1 = __importStar(require("./ReanimatedArcBase"));
class ReanimatedArc extends React.Component {
    constructor() {
        super(...arguments);
        this.arcSweepAngle = new react_native_reanimated_1.default.Value(0);
        this.rotation = new react_native_reanimated_1.default.Value(0);
        this.arcSweepAngleTiming = null;
        this.rotationTiming = null;
    }
    componentDidMount() {
        const { initialAnimation, arcSweepAngle, rotation } = this.props;
        if (initialAnimation) {
            this.runArcAnimation();
            this.runRotationAnimation();
        }
        else {
            this.arcSweepAngle.setValue(arcSweepAngle);
            this.rotation.setValue(rotation);
        }
    }
    componentDidUpdate(prevProps) {
        const { arcSweepAngle, rotation } = this.props;
        if (arcSweepAngle !== prevProps.arcSweepAngle) {
            this.runArcAnimation();
        }
        if (rotation !== prevProps.rotation) {
            this.runRotationAnimation();
        }
    }
    runArcAnimation() {
        const { arcSweepAngle, animationDuration, easing } = this.props;
        if (this.arcSweepAngleTiming !== null) {
            this.arcSweepAngleTiming.stop();
        }
        this.arcSweepAngleTiming = react_native_reanimated_1.default.timing(this.arcSweepAngle, {
            toValue: arcSweepAngle,
            duration: animationDuration,
            easing,
        });
        this.arcSweepAngleTiming.start(() => {
            this.arcSweepAngleTiming = null;
        });
    }
    runRotationAnimation() {
        const { rotation, animationDuration, easing } = this.props;
        if (this.rotationTiming !== null) {
            this.rotationTiming.stop();
        }
        this.rotationTiming = react_native_reanimated_1.default.timing(this.rotation, {
            toValue: rotation,
            duration: animationDuration,
            easing,
        });
        this.rotationTiming.start(() => {
            this.rotationTiming = null;
        });
    }
    render() {
        const { diameter, width, color, lineCap, hideSmallAngle, style } = this.props;
        return (<ReanimatedArcBase_1.default arcSweepAngle={this.arcSweepAngle} rotation={this.rotation} diameter={diameter} width={width} color={color} lineCap={lineCap} hideSmallAngle={hideSmallAngle} style={style}/>);
    }
}
ReanimatedArc.defaultProps = {
    ...ReanimatedArcBase_1.defaultProps,
    initialAnimation: true,
    animationDuration: 800,
    easing: react_native_reanimated_1.Easing.linear,
};
exports.default = ReanimatedArc;
//# sourceMappingURL=ReanimatedArc.js.map